<style>
    .Form_Textarea
    {
        display: block;
        position: relative;
        width: 100%;
        border: 1px solid var(--gray-2);
        overflow: hidden;
        transition: border-color 83ms ease-in-out 34ms;
        border-radius: 2px;
        background-color: white;
        @media (max-width:1024px) { width: 100%; }
        &.active { border-color: blue; label{ color: blue; }  }

        label
        {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            font-weight: normal;
            color: var(--gray-6);
            user-select: none;
            display: flex;
            align-items: center;
        }

        textarea
        {
            background: transparent;
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            width: 100%;
            outline: 0;
            border: 0;
            color: var(--gray-8);
            overflow: hidden;
            padding: 0;
            font-family: inherit;
            resize: none;
            &::-ms-expand {display: none;}
            &:hover, &:focus { color: var(--gray-9); }
        }

        &.small
         {
             height: 24rem;
             margin-bottom: 12rem;
             transition: opacity 50ms ease-in-out;
            label{ height: 22rem; font-size: 10rem; line-height: 10rem; padding-left: 10rem; overflow: hidden; opacity: 0; }
            textarea{ font-size: 10rem; line-height: 14rem; border-top: 4rem solid transparent; border-bottom: 4rem solid transparent; padding-left: 7rem; }
            &.empty
             {
                label{ height: 22rem; opacity: 1;  }
             }
            .alert-icon{ top: 2.5rem; }
            --size: 8rem;
        }

        &.normal
         {
             height: 36rem;
             margin-bottom: 24rem;
             transition: opacity 50ms ease-in-out;
            label{ height: 34rem; font-size: 12rem; line-height: 12rem; padding-left: 10rem; overflow: hidden; opacity: 0; }
            textarea{ font-size: 12rem; line-height: 16rem; border-top: 9rem solid transparent; border-bottom: 9rem solid transparent; padding-left: 7rem; }
            &.empty
             {
                label{ height: 32rem; opacity: 1;  }
             }
            .alert-icon{ top: 8rem; }
            --size: 10rem;
         }



        &.big
         {
             height: 48rem;
             margin-bottom: 36rem;
            label
            {
                transition: all 50ms ease-in-out;
                height: 14rem;
                font-size: 10rem;
                line-height: 14rem;
                padding-left: 7rem;
                margin-top: calc(8rem - 1px);
            }
            textarea
            {
                font-size: 12rem;
                padding-left: 7rem;
                line-height: 16rem;
                height: 16rem;
                margin-top: calc( 26rem - 1px);
            }
            &.empty
             {
                label{ height: 46rem; font-size: 12rem; line-height: 12rem; margin: 0;  }
             }
            .alert-icon{ top: 15rem; }
            --size: 12rem;
         }

        .alert-icon
        {
            position: absolute;
            right: 7rem;
            font-size: calc(var(--size) + 6rem);
            top: 0;
            align-items: center;
            justify-content: center;
            margin: auto;
            opacity: 0;
            display: flex;
        }

        &.error
         {
             border: 1px solid var(--red-8);
             background: rgba(191, 54, 12, 0.05);
            label{ color: var(--red-8); }
            .alert-icon
            {
                opacity: 1;
                color: var(--red-8);
            }
        }

        &.success
         {
             border: 1px solid var(--green-8);
             background: rgba(105, 240, 174, 0.05);
            label{ color: var(--green-8); }
            .alert-icon
            {
                opacity: 1;
                color: var(--green-8);
                &:before{ content: "\e025"; }
            }
        }
    }

</style>
<script>
    window.textarea = new ( function()
    {
        this.Focus = function(textarea)
        {
            textarea.classList.add('active');
            textarea.classList.contains('empty') ? textarea.classList.remove('empty') : '';
            if(textarea.classList.contains('error')){ textarea.classList.remove('error') }
            if(textarea.classList.contains('success')){ textarea.classList.remove('success') }
        };

        this.Blur = function(textarea)
        {
            textarea.classList.remove('active');
            if( !textarea.getElementsByTagName('textarea')[0].value.trim() && !textarea.classList.contains('empty') )
            {
                textarea.classList.add('empty');
            }
            else if( textarea.getElementsByTagName('textarea')[0].value.trim() )
            {
                textarea.classList.remove('empty');
            }
        };
    });
</script>

let _size = ( typeof size != 'undefined' ? size : ' normal' );
let _selector = ( typeof selector != 'undefined' ? selector : null );
let _value = ( typeof value != 'undefined' ? value : '' );
let _onChange = ( typeof onchange != 'undefined' ? onchange : null );
let _autocomplete = ( typeof autocomplete != 'undefined' ? autocomplete : null );
let _required = ( typeof required != 'undefined' ? undefined : null );
let _width = ( typeof width != 'undefined' ? width : '' );
let _style = ( typeof style != 'undefined' ? style : '' );
let _error = ( typeof error != 'undefined' ? ' error' : '' );
let _success = ( typeof success != 'undefined' ? ' success' : '' );
let _rows = ( typeof rows != 'undefined' ? rows : 1 );
let _auto_extend = ( typeof autoextend != 'undefined' ? true : false );

<div class={'Form_Textarea ' + ( _value.length > 0 ? '' : 'empty ' ) + _size + _error + _success} style={"width:" + _width + _style }>
    if( _size === 'big' )
    {
        <label for={'textarea_data_' + label.liqd_slugify()} onclick="this.nextSibling.focus();">{label}</label>
    }
    <textarea data-selector={_selector} placeholder={( _size != 'big' ? label : null )} required={_required} onfocus="textarea.Focus(this.parentNode)" onchange={_onChange} onblur="textarea.Blur(this.parentNode)" rows={_rows} id={'textarea_data_' + label.liqd_slugify()}>{( _value.length > 0 ? _value : '' )}</textarea>
    <i class="alert-icon" data-icon="warning"></i>
</div>
<script Textarea_ID ={'textarea_data_' + label.liqd_slugify()} autoextend={_auto_extend} size={( typeof size != "undefined" ? size : 36)} instance>
    let txtAreaElement = document.getElementById(Textarea_ID);
    if( typeof size == "string" )
    {
        size === 'small' ? size = { font: 24, line: 14, margin: 10 } : '';
        size === 'normal' ? size = { font: 36, line: 16, margin: 20 } : '';
        size === 'big' ? size = { font: 48, line: 16, margin: 32 } : '';
        typeof size == "string" ? size = { font: 36, line: 16, margin: 20 } : '';
    }

    if(autoextend)
    {
        txtAreaElement.parentNode.style.height = parseInt(txtAreaElement.rows) * size.font + 'rem';

        let oldCount = 1;

        txtAreaElement.addEventListener('input', function()
        {
            var text = txtAreaElement.value;
            var lines = text.split("\n");
            var count = lines.length;

            if( count != oldCount )
            {
                txtAreaElement.parentNode.style.height = ( ( size.line  * count ) + size.margin ) + 'rem';
                oldCount = count;
            }
        });
    }
</script>