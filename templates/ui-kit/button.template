<style require="/main.style">
    @keyframes spin
    {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .button
    {
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
        transition: all 30ms ease-in-out;
        position: relative;
        user-select: none;
        background: var( --form-button-background, var(--form-fill-background, silver ));
        color: var( --form-button-color, var(--form-color, black ));
        border: var( --form-button-border-width, var(--form-border-width, 1px )) solid  var( --form-button-border-color, var(--form-border-color, silver ));
        border-radius: var( --form-button-border-radius, var(--form-border-radius, 2px ));
        box-sizing: border-box;
        height: var( --form-button-height-size, var(--form-height-size, 36px ));
        min-width: var( --form-button-height-size, var(--form-height-size, 36px ));
        font-size: var( --form-button-font-size, var(--form-font-size, 14px ));
        line-height: var( --form-button-font-size, var(--form-font-size, 14px ));
        &:disabled
         {
                 cursor: default;
                 pointer-events: none;
                 background: var( --form-button-disabled-background, var(--form-fill-disabled-background, gray ));
                 color: var( --form-button-disabled-color, var(--form-disabled-color, black ));
                 border: var( --form-button-border-width, var(--form-border-width, 1px )) solid  var( --form-button-border-disabled-color, var(--form-border-disabled-color, gray ));
         }
        @media ( min-width: 1024px )
        {
            &:hover
            {
                background: var( --form-button-hover-background, var(--form-hover-background, blue ));
                color: var( --form-button-hover-color, var(--form-hover-color, white ));
            }
        }
        &:focus{ outline: 0; }
        &:before
         {
             position: absolute;
             top: 0;
             bottom: 0;
             margin: auto;
             display: flex;
             align-items: center;
             justify-content: center;
         }

        &.loader
         {
            pointer-events: none;
            .loader-box
            {
                border-radius: 50%;
                animation: spin 2s linear infinite;
                background: conic-gradient(from 90deg, rgba(255,255,255,0), rgba(255,255,255,0), rgba(255,255,255,0.25), rgba(255,255,255,0.50), rgba(255,255,255,0.75), rgba(255,255,255,1), rgba(255,255,255,1));
                position: relative;
                width: var( --form-button-font-size, var(--form-font-size, 14px ));
                height: var( --form-button-font-size, var(--form-font-size, 14px ));
                &:after
                 {
                     content: '';
                     position: absolute;
                     top: 50%;
                     left: 50%;
                     transform: translate(-50%, -50%);
                     width: calc( var( --form-button-font-size, var(--form-font-size, 14px )) - 4px );
                     height: calc( var( --form-button-font-size, var(--form-font-size, 14px )) - 4px );
                     background: var( --form-button-background, var(--form-fill-background, silver ));
                     border-radius: 50%;
                 }
            }
        }
    }
</style>
<script>
    window.Button = new ( function()
    {
        let _original_content = document.createDocumentFragment();

        this._showLoader = function( element )
        {
            [...element.childNodes].forEach( n => _original_content.appendChild(n));
            element.classList.add('loader');
            let loader = document.createElement('DIV');
                loader.className = 'loader-box';

            element.innerText = element.dataset.loader;

            if( element.dataset.loader.length > 0 )
            {
                loader.style.marginRight = '4px';
            }

            element.prepend( loader );
        };

        this._hideLoader = function( element )
        {
           element.classList.remove('loader');
           element.innerHTML = '';
           element.appendChild( _original_content );
        };
    });
</script>

let _loading = ( typeof loading != 'undefined' ? loading : '' );
let _disabled = ( typeof disabled != 'undefined' ? undefined : null );
<button class="button" disabled={_disabled} data-loader={_loading} onclick={( typeof onclick != "undefined" ? ( typeof loading != "undefined" ? "(async () => {Button._showLoader(this); await " + onclick + ";Button._hideLoader(this)})();" : onclick ) : '' )}>
   if( typeof CONTENT != 'undefined' )
   {
        {CONTENT}
   }
</button>
