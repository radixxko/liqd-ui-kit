<style>
    .Select
    {

        display: flex;
        width: 100%;
        position: relative;
        border: var( --form-select-border-width, var(--form-border-width, 1px )) solid  var( --form-select-border-color, var(--form-border-color, #dfe3e9 ));
        height: var( --form-select-height-size, var(--form-height-size, 36px ));
        border-radius: var( --form-select-border-radius, var(--form-border-radius, 2px ));
        background: var( --form-select-background, var(--form-background, #ffffff ));
        transition: all 83ms ease-in-out 34ms;

        .input
        {
            position: relative;
            width: 100%;
            height: 100%;
            white-space: nowrap;
            text-overflow: ellipsis;
            cursor: pointer;
            overflow: hidden;
            font-size: var( --form-select-font-size, var(--form-font-size, 12px ));
            line-height: calc( var( --form-select-font-size, var(--form-font-size, 12px )) + 4px);
            padding: calc( ( var( --form-select-height-size, var(--form-height-size, 36px )) -  calc( var( --form-select-font-size, var(--form-font-size, 12px )) + 4px) ) / 2 );
            color: var( --form-select-color, var(--form-color, #354052 ));
            padding-left: var( --form-select-padding-left, var(--form-padding-left, 7px ));
            padding-right: var( --form-select-height-size, var(--form-height-size, 36px ));

            &[placeholder]:empty:before
            {
                content:attr(placeholder);
                display: inline;
                opacity: 0.5;
            }

            &:after
             {
                 content: "\e08a";
                 font-family: var( --form-select-icon-font, var(--from-icon-font, "flaticon"));
                 right: 0;
                 top: 0;
                 height: var( --form-select-height-size, var(--form-height-size, 36px ));
                 width: var( --form-select-height-size, var(--form-height-size, 36px ));
                 position: absolute;
                 opacity: 0;
                 transition: opacity 83ms ease-in-out 34ms;
                 display: flex;
                 align-items: center;
                 justify-content: center;
             }
        }

        &.label
        {
            margin-top: var( --form-select-label-height, var(--form-label-height, 24px ));
        }

        label
        {
            position: absolute;
            font-weight: normal;
            user-select: none;
            transition: all 83ms ease-in-out 34ms;
            color: var( --form-select-label-color, var(--form-label-color, #7f8fa4 ));
            font-size: var( --form-select-label-fill-size, var(--form-fill-label-size, 12px ));
            line-height: var( --form-select-label-height, var(--form-label-height, 24px ));
            top: calc( var( --form-select-label-height, var(--form-label-height, 24px )) * -1 );
        }

        .select-wrap
        {
            position: absolute;
            left: 0;
            top: var( --form-select-height-size, var(--form-height-size, 36px ));
            border: var( --form-select-border-width, var(--form-border-width, 1px )) solid transparent;
            border-bottom-right-radius: var( --form-select-border-radius, var(--form-border-radius, 2px ));
            border-bottom-left-radius: var( --form-select-border-radius, var(--form-border-radius, 2px ));
            background-color: transparent;
            margin-left: -1px;
            height: 0;
            width: 100%;
            overflow-x: hidden;
            overflow-y: auto;
            display: flex;
            flex-wrap: wrap;

            .suggest-search
            {
                position: relative;
                width: var( --form-select-height-size, var(--form-height-size, 36px ));
                height: var( --form-select-height-size, var(--form-height-size, 36px ));
                &:before
                {
                     position: absolute;
                     z-index: 1;
                     left: 0;
                     top: 0;
                     height: 100%;
                     width: 100%;
                     display: flex;
                     align-items: center;
                     justify-content: center;
                     opacity: 0.5;
                }
            }

            input
            {
                position: relative;
                width: calc( 100% - var( --form-select-padding-left, var(--form-padding-left,7px )) - var( --form-select-height-size, var(--form-height-size, 36px )));
                border: 0;
                outline: none;
                padding: 0;
                color: var( --form-select-color, var(--form-color, #354052 ));
                padding-left: var( --form-select-padding-left, var(--form-padding-left, 7px ));
                height: var( --form-select-height-size, var(--form-height-size, 36px ));
                line-height: var( --form-select-line-height, var(--form-line-height, 16px ));
                font-size: var( --form-select-font-size, var(--form-font-size, 12px ));
                &::placeholder { opacity: 0.5; }
            }

            .select-group
            {
                font-weight: bold;
                cursor: default;
                color: var( --form-select-color, var(--form-color, #354052 ));
                white-space: nowrap;
                padding: var( --form-select-padding, var(--form-padding,0 7px ));
                border-top: var( --form-select-border-width, var(--form-border-width, 1px )) solid var( --form-select-border-color, var(--form-border-color, #dfe3e9 ));
                height: var(--form-select-group-height, 29px );
                line-height: var(--form-select-group-height, 29px );
                width: 100%;
            }

            .select-option
            {
                cursor: pointer;
                color: var( --form-select-color, var(--form-color, #354052 ));
                white-space: nowrap;
                position: relative;
                padding: var( --form-select-padding, var(--form-padding,0 7px ));
                height: var(--form-select-group-height, 29px );
                line-height: var(--form-select-group-height, 29px );
                border-top: var( --form-select-border-width, var(--form-border-width, 1px )) solid var( --form-select-border-color, var(--form-border-color, #dfe3e9 ));
                width: 100%;

                &.active
                {
                     background-color: var( --form-select-active-background, rgba( 0, 0, 0, 0.03 ) );
                     color: var( --form-select-focus-label-color, var(--form-focus-label-color, #2ea2f8 ));
                }

                 &:hover:before
                  {
                      content: '';
                      position: absolute;
                      left: 0;
                      top: 0;
                      bottom: 0;
                      right: 0;
                      background: var( --form-select-hover-background, rgba( 0, 0, 0, 0.02 ) );
                  }
            }
        }

        &:hover
        {
             border-color: var( --form-select-border-hover-color, var(--form-border-hover-color, #ced0da ));
            .input
            {
                &:after
                 {
                     opacity: 0.5;
                 }
            }
        }

        &.focus{ border-color: var( --form-select-focus-border-color, var(--form-focus-border-color, #2ea2f8 )); }

        &.focus,
        &.fill
         {
            .input
            {
                &:after
                 {
                     opacity: 0.5;
                 }
            }
        }

        &.focus
         {
            .select-wrap
            {
                height: auto;
                z-index: 999;
                background-color: var( --form-select-background, var(--form-background, #ffffff ));
                border: var( --form-select-border-width, var(--form-border-width, 1px )) solid var( --form-select-focus-border-color, var(--form-focus-border-color, #2ea2f8 ));
            }
         }

        &.error, &.success
        {
              .input:after
              {
                  font-weight: bold;
                  font-size: calc( var( --form-select-font-size, var(--form-font-size, 12px )) - 2px);
                  line-height: calc( var( --form-select-font-size, var(--form-font-size, 12px )) - 2px);
              }
        }
        &.error
         {
             border-color: var( --form-select-error-color, var(--form-error-color, #ed1c24 ));
            .input, .input:after, label
            {
                opacity: 1;
                color: var( --form-select-error-color, var(--form-error-color, #ed1c24 ));
                content: "\e002";
            }
        }

        &.success
         {
             border-color: var( --form-select-success-color, var(--form-success-color, #1bb934 ));
            .input, .input:after, label
            {
                opacity: 1;
                color: var( --form-select-success-color, var(--form-success-color, #1bb934 ));
                content: "\e024";
            }
        }

        &.disabled
         {
             pointer-events: none; cursor: default;
             border: var( --form-select-border-width, var(--form-border-width, 1px )) solid  var( --form-select-border-disabled-color, var(--form-border-disabled-color, #dfe3e9 ));
             background: var( --form-select-disabled-background, var(--form-disabled-background, rgba(0,0,0,0.03) ));
             color: var( --form-select-disabled-color, var(--form-disabled-color, #354052 ));
         }
    }
</style>
<script>
    if( typeof Select === 'undefined' )
    {
        window.Select = class Select
        {
            constructor( input, value, option, options = {} )
            {
                input._class = this;

                this._input = input;
                this._element = this._input.parentNode;
                this._multiple = ( options.hasOwnProperty('multiple') && options.multiple == true ? true : false );

                this._element.addEventListener( 'click', this.focus.bind(this) );
                this._element.addEventListener( 'mouseover', this.stop.bind(this) );
                this._element.addEventListener( 'mouseout', this.hidden.bind(this) );

                if( options.hasOwnProperty('contenteditable') && options.contenteditable )
                {
                    this._element.querySelector('.input').addEventListener( 'keypress', event => { if( event.keyCode === 13 ){  DOM_stopPropagation( event ) } } );
                    this._element.querySelector('.input').addEventListener( 'input', event => { event.target.previousSibling.value = event.target.textContent.replace(/\n|\t/g,' '); } );
                }

                this._element.querySelectorAll('.select-option').forEach( ( item ) => { item.addEventListener( 'click', this.select.bind(this, item) ); } );

                let input_text = null;
                if( ( input_text = this._element.querySelector('.select-wrap input[type="text"]') ) )
                {
                    input_text.addEventListener( 'keyup', this.keyup.bind( this, input_text ) );
                }

                this._option = option;
                this._values = [];
                this._suggest_timeout = null;

                if( this._element.querySelector('div.select-option.active') )
                {
                    console.log(Array.from(this._element.querySelectorAll('div.select-option.active')).map( r => r.innerHTML ))
                    this._element.querySelector('div.input').innerText = Array.from(this._element.querySelectorAll('div.select-option.active')).map( r => r.innerHTML ).join(', ');
                    this._values = Array.from(this._element.querySelectorAll('div.select-option.active')).map( r => ( { value: r.dataset.value, label : r.innerHTML } ) );
                }
            }

            stop()
            {
                Timers.unsetTimeout( this._input.id );
            }

            hidden()
            {
                Timers.setTimeout( this._input.id, () =>
                {
                    this._hidden();
                }, 500);
            }

            _hidden()
            {
                if( this._input.value !== '' ){ this._element.classList.add('fill'); }else{ this._element.classList.remove('fill'); }
                this._element.classList.remove('focus');
            }

            focus( event )
            {
                if( event.target.classList.contains('input-select') || event.target.classList.contains('input') || event.target.classList.contains('label') )
                {
                    this._element.querySelector('.select-wrap').style.maxHeight = Math.max( 150, ( document.body.getBoundingClientRect().height - this._element.querySelector('.select-wrap').getBoundingClientRect().y - 100 ) )+'px';
                    this._element.classList.add('focus');

                    if( this._element.querySelector('.select-wrap input[type="text"]') && !this._element.querySelector('.input').getAttribute('contenteditable') ){ this._element.querySelector('.select-wrap input[type="text"]').focus(); }
                }

                if(this._element.classList.contains('error')){ this._element.classList.remove('error') }
                if(this._element.classList.contains('success')){ this._element.classList.remove('success') }
            }


            select( element )
            {
                if( element.classList.contains('active') )
                {
                    element.classList.remove('active');
                    if( this._multiple ){ this._values = this._values.filter( el => el.value != element.dataset.value ); }
                }
                else
                {
                    if( !this._multiple )
                    {

                        this._values = [];
                        this._element.querySelectorAll('.select-option').forEach( item => item.classList.remove('active') );
                    }

                    element.classList.add('active');
                    this._values.push({ value : element.getAttribute('data-value'), label : element.innerText.trim() });
                }
                this._setValue();
                this._multiple ? this.hidden() : this._hidden();
            }

            keyup( element )
            {
                if( element.getAttribute('data-request') )
                {
                    var url = decodeURIComponent( element.getAttribute( 'data-request' ) );

                    window.clearTimeout( this._suggest_timeout );

                    this._suggest_timeout = setTimeout( () =>
                    {
                        DOM_request( 'GET', url, { query : element.value }, ( data ) =>
                        {
                            var wrapper = element.parentNode;
                            wrapper.querySelectorAll('.select-option,.select-group').remove();

                            let div = null, sub_div = null, isSelected = false;
                            for( var key in data.option )
                            {
                                div = wrapper.querySelector('[data-value="'+key+'"]');
                                if( !div )
                                {
                                    isSelected = ( typeof this._values.find( f => { return ( f.value === key ); } ) !== 'undefined' );
                                    div = document.createElement('div'); div.className = 'select-'+( typeof data.option[key] === 'string' ? 'option' : 'group' )+( isSelected ? ' active' : '' ); div.setAttribute('data-value', key);
                                    div.innerHTML = ( typeof data.option[key] === 'string' ? data.option[key] : key );
                                    if( typeof data.option[key] === 'string' ){ div.addEventListener( 'click', this.select.bind(this, div) ); }
                                }
                                wrapper.appendChild( div );
                                if( typeof data.option[key] === 'object' )
                                {
                                    for( var s_key in data.option[key] )
                                    {
                                        sub_div = wrapper.querySelector('[data-value="'+data.option[key][s_key].id+'"]');
                                        if( !sub_div )
                                        {
                                            isSelected = ( typeof this._values.find( f => { return ( f.value === data.option[key][s_key].id ); } ) !== 'undefined' );
                                            sub_div = document.createElement('div'); sub_div.className = 'select-option'+( isSelected ? ' active' : '' ); sub_div.setAttribute('data-value', data.option[key][s_key].id);
                                            sub_div.innerHTML = data.option[key][s_key].value;
                                            sub_div.addEventListener( 'click', this.select.bind(this, sub_div) );
                                        }
                                        wrapper.appendChild( sub_div );
                                    }
                                }
                            }
                        } );
                    }, 300 );
                }
                else
                {
                    var options = element.parentNode.querySelectorAll('.select-option');
                    if( options.length > 0 )
                    {
                        for( var a = 0; a < options.length; ++a )
                        {
                            if( !this._containsWords( options[a].innerHTML, element.value ) ){ options[a].style.display = 'none'; } else { options[a].style.display = 'block'; }
                        }
                    }
                }
            }

            _setValue( change = true )
            {
                let old_value = this._input.value;
                this._element.querySelector('.input').innerHTML = ( this._values.length > 0 ? this._values.map( r => r.label ).join(', ') : '' );
                this._input.value = ( this._values.length > 0 ? this._values.map( r => r.value ).join(',') : '' );

                if( this._input.value !== '' )
                {
                    this._element.classList.add('fill');
                    for( let value of this._input.value.split(',') )
                    {
                        this._element.querySelector('.select-option[data-value="'+value+'"]').classList.add('active');
                    }
                }
                else if( this._input.value === '' )
                {
                    this._element.classList.remove('fill');
                    if( this._element.querySelector('.select-option.active') )
                    {
                        this._element.querySelector('.select-option.active').classList.remove('active');
                    }
                }

                if( this._input.onchange && old_value !== this._input.value && change )
                {
                    this._input.onchange();
                }

                if( "createEvent" in document  && old_value !== this._input.value && change )
                {
                    var evt = document.createEvent("HTMLEvents");
                    evt.initEvent("change", false, true);
                    this._input.dispatchEvent(evt);
                }
            }

            _containsWords( haystack, words )
            {
                words = words.trim().toLowerCase();
                haystack = haystack.trim().toLowerCase();

                if( words.length )
                {
                    if( typeof words == 'string' ){ words = words.split(/\s+/g); }

                    for( var i = 0; i < words.length; ++i )
                    {
                        let position = -1, found = false;

                        while( ( position = haystack.indexOf( words[i], position + 1 ) ) !== -1 )
                        {
                            if( position != 0 && ' \t\n'.indexOf(haystack[position-1]) === -1 ) { continue; } else if( i < words.length - 1 && haystack.length > words[i].length + position && ' \t\n'.indexOf(haystack[position+words[i].length]) === -1 ) { continue; } else { found = true; break; }
                        }

                        if( !found ){ return false; }
                    }
                }
                return true;
            }
        }
    }
</script>
var value = ( typeof value !== 'undefined' ? (  typeof multiple !== 'undefined' ? ( typeof value === 'string' ? JSON.parse(value) : value ) : value ) : '' );
let _width = ( typeof width !== 'undefined' ? width : '100%' );
let _style = ( typeof style !== 'undefined' ? style : '' );
let _selected = ( typeof selected !== 'undefined' && selected === 'true' ? ' selected' : '');
let _class = ( typeof clazz !== 'undefined' ? ' '+clazz : '' );
let _disabled = ( typeof disabled !== 'undefined' && disabled === 'true' ? ' disabled' : '' );
let _fill = ( typeof value !== 'undefined' && value.length > 0 ? ' fill' : '' );
let _label = ( typeof label !== 'undefined' ? label : null );
let _required = ( typeof required !== 'undefined' ? required : null );
let _onchange = ( typeof onchange !== 'undefined' ? onchange : null );
let _value = ( typeof value !== 'string' ? value.join( ',' ) : '' );
let _name = ( typeof name !== 'undefined' ? name : null );
let _id = ( typeof id !== 'undefined' ? id : null );
let _contenteditable = ( typeof contenteditable !== 'undefined' ? contenteditable : null );
let _request = ( typeof request !== 'undefined' ? encodeURIComponent( request ) : null );
let _init = ( typeof init !== 'undefined' ? init : 'true' );
let _error = ( typeof error !== 'undefined' ? ' error' : '' );
let _success = ( typeof success !== 'undefined' ? ' success' : '' );
let _multiple = ( typeof multiple !== 'undefined' ? true : false );
let _placeholder = ( typeof placeholder !== 'undefined' ? placeholder : null );

<div style={'width:'+_width+';'+_style} class={'Select' + _fill + _selected +_class + _disabled + _error + _success  + ( _label ? ' label' : '' ) }>
    <label for={_id} class="label">{label}</label>
    <input type="text" style="display:none;" required={_required} onchange={_onchange} value={_value} name={_name} id={_id} />
    <div class="input" placeholder={_placeholder} contenteditable={_contenteditable} autocomplete="off" autocapitalize="off" autocorrect="off" spellcheck="false">
    </div>
    <div class="select-wrap">
        if( typeof suggest !== 'undefined' && suggest )
        {
            <input placeholder="Search" autocomplete="off" class="input-element-text" onkeypress="return event.keyCode!=13" type="text" data-request={_request}/>
            <div class="suggest-search" data-icon="search"></div>
        }

        for( key, item of options )
        {
            <div class={'select-'+( typeof item === 'string' ? 'option' : 'group' )+( value.includes( key ) ? ' active' : '' )} data-value={key}>{( typeof item === 'string' ? item : key )}</div>
            if( typeof item === 'object' )
            {
                for( g_item of item )
                {
                    if( value.includes( g_item.id ) )
                    {
                        <div class="select-option active" data-value={g_item.id}>{g_item.value}</div>
                    }
                }
                for( g_item of item )
                {
                    if( !value.includes( g_item.id ) )
                    {
                        <div class="select-option" data-value={g_item.id}>{g_item.value}</div>
                    }
                }
            }
        }
    </div>
</div>
<script instance select={_id} value={value} options={options} contenteditable={_contenteditable} multiple={_multiple} init={_init}>
    window.addEventListener('DOMContentLoaded', (event) =>
    {
        if( init === 'true' )
        {
            new Select( document.getElementById( select ), value, options, {contenteditable, multiple} );
        }
    });
</script>
