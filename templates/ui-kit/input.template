<style>
    .Input
    {
        display: flex;
        flex-direction: column;
        width: 100%;
        position: relative;
        border: var( --form-input-border-width, var(--form-border-width, 1px )) solid  var( --form-input-border-color, var(--form-border-color, #dfe3e9 ));
        height: var( --form-input-height-size, var(--form-height-size, 36px ));
        border-radius: var( --form-input-border-radius, var(--form-border-radius, 2px ));
        background: var( --form-input-background, var(--form-background, #ffffff ));
        transition: all 83ms ease-in-out 34ms;
        &.active
         {
             border-color: var( --form-input-focus-border-color, var(--form-focus-border-color, #2ea2f8 ));
             span
             {
                 color: var( --form-input-focus-label-color, var(--form-focus-label-color, #2ea2f8 ));
             }
        }
        &.disabled
        {
            pointer-events: none; cursor: default;
            border: var( --form-input-border-width, var(--form-border-width, 1px )) solid  var( --form-input-border-disabled-color, var(--form-border-disabled-color, #dfe3e9 ));
            background: var( --form-input-disabled-background, var(--form-disabled-background, rgba(0,0,0,0.03) ));
            color: var( --form-input-disabled-color, var(--form-disabled-color, #354052 ));
        }

        &.empty:hover
        {
            border-color: var( --form-input-border-hover-color, var(--form-border-hover-color, #ced0da ));
        }

        &.label
        {
            margin-top: var( --form-input-label-height, var(--form-label-height, 24px ));
        }

        &.icon-left{ input{ padding-left: var( --form-input-height-size, var(--form-height-size, 36px )); } &:before{ left: 0; } }
        &.icon-right{ input{ padding-right: var( --form-input-height-size, var(--form-height-size, 36px )); } &:before{ right: 0; } }
        span
        {
            position: absolute;
            font-weight: normal;
            user-select: none;
            transition: all 83ms ease-in-out 34ms;
            color: var( --form-input-label-color, var(--form-label-color, #7f8fa4 ));
            font-size: var( --form-input-label-fill-size, var(--form-fill-label-size, 12px ));
            line-height: var( --form-input-label-height, var(--form-label-height, 24px ));
            top: calc( var( --form-input-label-height, var(--form-label-height, 24px )) * -1 );
        }

        input
        {
            cursor: text;
            height: 100%;
            color: var( --form-input-color, var(--form-color, #354052 ));
            font-size: var( --form-input-font-size, var(--form-font-size, 12px ));
            line-height: calc( var( --form-input-font-size, var(--form-font-size, 12px )) + 2px);
            padding: var( --form-input-padding, var(--form-padding, 0 7px ));
            border: 0;
            outline: 0;
            background: transparent;
            &::placeholder
            {
                 color: var( --form-input-placeholder-color, var(--form-placeholder-color, #354052 ));
                 opacity: 0.5;
            }
        }
        input::-webkit-search-decoration,
        input::-webkit-search-cancel-button,
        input::-webkit-search-results-button,
        input::-webkit-search-results-decoration
        {
            -webkit-appearance:none;
        }

        &:after, &:before
        {
             font-family: var( --form-input-icon-font, var(--from-icon-font, "flaticon"));
             position: absolute;
             bottom: 0;
             top: 0;
             display: flex;
             align-items: center;
             justify-content: center;
             font-weight: bold;
             color: var( --form-input-icon-color, var(--from-icon-color, #ced0da));
             background: var( --form-input-icon-background, var(--from-icon-background, transparent));
             width: var( --form-input-height-size, var(--form-height-size, 36px ));
        }

        &:after
        {
            right: 0;
            font-size: calc( var( --form-input-font-size, var(--form-font-size, 12px )) - 2px);
            line-height: calc( var( --form-input-font-size, var(--form-font-size, 12px )) - 2px);
        }
        &:before
        {
            font-size: calc( var( --form-input-font-size, var(--form-font-size, 12px )) + 2px);
            line-height: calc( var( --form-input-font-size, var(--form-font-size, 12px )) + 2px);
        }

        &.error
        {
            border-color: var( --form-input-error-color, var(--form-error-color, #ed1c24 ));
            span{ color: var( --form-input-error-color, var(--form-error-color, #ed1c24 )); }
            &:after { content: "\e002"; color: var( --form-input-error-color, var(--form-error-color, #ed1c24 )); }
        }

        &.success
        {
            border-color: var( --form-input-success-color, var(--form-success-color, #1bb934 ));
            span{ color: var( --form-input-success-color, var(--form-success-color, #1bb934 )); }
            &:after{ content: "\e024"; color: var( --form-input-success-color, var(--form-success-color, #1bb934 )); }
        }
    }
</style>
<script>
    window.input = new ( function()
    {
        this.Focus = function(input)
        {
            input.classList.add('active');
            input.classList.contains('empty') ? input.classList.remove('empty') : '';
            if(input.classList.contains('error')){ input.classList.remove('error') }
            if(input.classList.contains('success')){ input.classList.remove('success') }

        };

        this.Blur = function(input)
        {
            input.classList.remove('active');
            if( !input.getElementsByTagName('input')[0].value.trim() && !input.classList.contains('empty') )
            {
                input.classList.add('empty');
            }
            else if( input.getElementsByTagName('input')[0].value.trim() )
            {
                input.classList.remove('empty');
            }
        };

        this.keyUp = function( input, event )
        {
            let prev = input.previousValue || '';
            let re = new RegExp(input.getAttribute('data-pattern'))
            let partial = re.toPartialMatchRegex();

            if( !partial.exec(input.value) )
            {
                input.value = prev;
            }

            input.previousValue = input.value;
            //console.log({ re, partial });
            //console.log( input.value, partial.exec(input.value) );
        }
    });
</script>
<script>
    RegExp.prototype.toPartialMatchRegex = function() {
        "use strict";

        var re = this,
            source = this.source,
            i = 0;

        function process () {
            var result = "",
                tmp;

            function appendRaw(nbChars) {
                result += source.substr(i, nbChars);
                i += nbChars;
            };

            function appendOptional(nbChars) {
                result += "(?:" + source.substr(i, nbChars) + "|$)";
                i += nbChars;
            };

            while (i < source.length) {
                switch (source[i])
                {
                    case "\\":
                        switch (source[i + 1])
                        {
                            case "c":
                                appendOptional(3);
                                break;

                            case "x":
                                appendOptional(4);
                                break;

                            case "u":
                                if (re.unicode) {
                                    if (source[i + 2] === "{") {
                                        appendOptional(source.indexOf("}", i) - i + 1);
                                    } else {
                                        appendOptional(6);
                                    }
                                } else {
                                    appendOptional(2);
                                }
                                break;

                            default:
                                appendOptional(2);
                                break;
                        }
                        break;

                    case "[":
                        tmp = /\[(?:\\.|.)*?\]/g;
                        tmp.lastIndex = i;
                        tmp = tmp.exec(source);
                        appendOptional(tmp[0].length);
                        break;

                    case "|":
                    case "^":
                    case "$":
                    case "*":
                    case "+":
                    case "?":
                        appendRaw(1);
                        break;

                    case "{":
                        tmp = /\{\d+,?\d*\}/g;
                        tmp.lastIndex = i;
                        tmp = tmp.exec(source);
                        if (tmp) {
                            appendRaw(tmp[0].length);
                        } else {
                            appendOptional(1);
                        }
                        break;

                    case "(":
                        if (source[i + 1] == "?") {
                            switch (source[i + 2])
                            {
                                case ":":
                                    result += "(?:";
                                    i += 3;
                                    result += process() + "|$)";
                                    break;

                                case "=":
                                    result += "(?=";
                                    i += 3;
                                    result += process() + ")";
                                    break;

                                case "!":
                                    tmp = i;
                                    i += 3;
                                    process();
                                    result += source.substr(tmp, i - tmp);
                                    break;
                            }
                        } else {
                            appendRaw(1);
                            result += process() + "|$)";
                        }
                        break;

                    case ")":
                        ++i;
                        return result;

                    default:
                        appendOptional(1);
                        break;
                }
            }

            return result;
        }

        return new RegExp(process(), this.flags);
    };
</script>

let _value = ( typeof value != 'undefined' ? value : '' );
let _onChange = ( typeof onchange != 'undefined' ? onchange : null );
let _autocomplete = ( typeof autocomplete != 'undefined' ? autocomplete : null );
let _required = ( typeof required != 'undefined' ? undefined : null );
let _width = ( typeof width != 'undefined' ? width : '' );
let _style = ( typeof style != 'undefined' ? style : '' );
let _error = ( typeof error != 'undefined' ? ' error' : '' );
let _disabled = ( typeof disabled != 'undefined' ? ' disabled' : '' );
let _success = ( typeof success != 'undefined' ? ' success' : '' );
let _type = ( typeof type != 'undefined' ? type : 'text' );
let _label = ( typeof label != 'undefined' ? label.liqd_slugify() : null );
let _name = ( typeof name != 'undefined' ? name : null );
let _placeholder = ( typeof placeholder != 'undefined' ? placeholder : null );
let _pattern = ( typeof pattern != 'undefined' ? pattern : null );
let _icon = ( typeof icon != 'undefined' ? icon : null );
let _icon_position = ( typeof iconPosition != 'undefined' ? ' icon-'+iconPosition : ' icon-left' );

<label class={'Input ' + ( _value.length > 0 ? '' : ' empty' ) + _error + _success + _disabled + ( _label ? ' label' : '' ) + ( _icon ? _icon_position : '' ) } data-icon={_icon} style={"width:" + _width + _style } >
    <input name={_name} placeholder={_placeholder} type={_type} value={_value} onfocus="input.Focus(this.parentNode)" onblur="input.Blur(this.parentNode)" data-pattern={_pattern} onchange={_onChange} onkeyup="window.input.keyUp(this, event)" autocomplete={_autocomplete} required={_required} />
    if( _label )
    {
        <span onclick="this.previousSibling.focus()">{label}</span>
    }
</label>
