<style>
    .Textarea
    {
        display: flex;
        flex-direction: column;
        position: relative;
        border: var( --form-textarea-border-width, var(--form-border-width, 1px )) solid  var( --form-textarea-border-color, var(--form-border-color, #dfe3e9 ));
        height: var( --form-textarea-height-size, var(--form-height-size, 48px ));
        width: var( --form-textarea-width-size, var(--form-width-size, 100% ));
        border-radius: var( --form-textarea-border-radius, var(--form-border-radius, 2px ));
        background: var( --form-textarea-background, var(--form-background, #ffffff ));
        transition: all 83ms ease-in-out 34ms;
        transition-property: background, color, border;
        &.active
        {
             border-color: var( --form-textarea-border-focus-color, var(--form-border-focus-color, #2ea2f8 ));
             background: var( --form-textarea-focus-background, var(--form-focus-background, #ffffff ));
             color: var( --form-textarea-focus-color, var(--form-focus-color, #354052));
            span
            {
                color: var( --form-input-focus-label-color, var(--form-focus-label-color, #2ea2f8 ));
                top: 2px;
                transform: translateY(0px);
            }
        }
        &.disabled
        {
             pointer-events: none; cursor: default;
             border: var( --form-textarea-border-width, var(--form-border-width, 1px )) solid  var( --form-textarea-border-disabled-color, var(--form-border-disabled-color, #dfe3e9 ));
             background: var( --form-textarea-disabled-background, var(--form-disabled-background, rgba(0,0,0,0.03) ));
             color: var( --form-textarea-disabled-color, var(--form-disabled-color, #354052 ));
        }

        &.empty:hover
        {
             border-color: var( --form-textarea-border-hover-color, var(--form-border-hover-color, #ced0da ));
             background: var( --form-textarea-hover-background, var(--form-hover-background, #ffffff ));
             color: var( --form-textarea-hover-color, var(--form-hover-color, #354052));
        }

        &:not(.empty), &.success, &.error
        {
            span
            {
                top: 2px;
                transform: translateY(0px);
            }
        }

        span
        {
            position: absolute;
            font-weight: normal;
            user-select: none;
            transition: all 83ms ease-in-out 34ms;
            color: var( --form-input-label-color, var(--form-label-color, #7f8fa4 ));
            font-size: var( --form-input-label-fill-size, var(--form-fill-label-size, 12px ));
            line-height: var( --form-input-label-height, var(--form-label-height, 24px ));
            top: 50%;
            text-align: left;
            left: 7px;
            transform: translateY(-50%);
        }

        textarea
        {
            font-family: inherit;
            cursor: text;
            height: 100%;
            color: var( --form-textarea-color, var(--form-color, #354052 ));
            font-size: var( --form-textarea-font-size, var(--form-font-size, 12px ));
            line-height: var( --form-textarea-line-height, var(--form-line-height, 16px ));
            padding: 0;
            margin: var( --form-textarea-padding, var(--form-padding,10px 7px ));
            margin-top: 24px;
            border: 0;
            outline: 0;
            background: transparent;
            resize: none;
            overflow: hidden;
            &::placeholder
            {
                 color: var( --form-textarea-placeholder-color, var(--form-placeholder-color, #354052 ));
                 opacity: 0.5;
            }
            &::-ms-expand {display: none;}
        }


        &.error
        {
            border-color: var( --form-textarea-error-color, var(--form-error-color, #ed1c24 ));
            span{ color: var( --form-textarea-error-color, var(--form-error-color, #ed1c24 )); }
        }

        &.success
        {
            border-color: var( --form-textarea-success-color, var(--form-success-color, #1bb934 ));
            span{ color: var( --form-textarea-success-color, var(--form-success-color, #1bb934 )); }
        }
    }
</style>
<script>
    window.textarea = new ( function()
    {
        this.Focus = function(textarea)
        {
            textarea.classList.add('active');
            textarea.classList.contains('empty') ? textarea.classList.remove('empty') : '';
            if(textarea.classList.contains('error')){ textarea.classList.remove('error') }
            if(textarea.classList.contains('success')){ textarea.classList.remove('success') }
        };

        this.Blur = function(textarea)
        {
            textarea.classList.remove('active');
            if( !textarea.getElementsByTagName('textarea')[0].value.trim() && !textarea.classList.contains('empty') )
            {
                textarea.classList.add('empty');
            }
            else if( textarea.getElementsByTagName('textarea')[0].value.trim() )
            {
                textarea.classList.remove('empty');
            }
        };

        window.addEventListener('DOMContentLoaded', (event) =>
        {
            for( let element of Array.from( document.querySelectorAll('textarea[data-resize]') ) )
            {
                size = { line: parseFloat( window.getComputedStyle(element).lineHeight ), margin: ( parseFloat( window.getComputedStyle(element).marginTop ) * 2 ) };
                element.parentNode.style.height = parseInt( element.rows ) * ( size.line + size.margin ) + 'px';
                let oldCount = 1;

                element.addEventListener('input', function()
                {
                    var text = element.value;
                    var lines = text.split("\n");
                    var count = lines.length;

                    if( count != oldCount )
                    {
                        element.parentNode.style.height = ( ( size.line  * count ) + size.margin ) + 'px';
                        oldCount = count;
                    }
                });
            }
        });

    });
</script>

let _name = ( typeof name != 'undefined' ? name : null );
let _value = ( typeof value != 'undefined' ? value : '' );
let _onChange = ( typeof onchange != 'undefined' ? onchange : null );
let _onFocus = ( typeof onfocus != 'undefined' ? onfocus : '' );
let _onBlur = ( typeof onblur != 'undefined' ? onblur : '' );
let _required = ( typeof required != 'undefined' ? undefined : null );
let _style = ( typeof style != 'undefined' ? style : null );
let _error = ( typeof error != 'undefined' ? ' error' : '' );
let _success = ( typeof success != 'undefined' ? ' success' : '' );
let _rows = ( typeof rows != 'undefined' ? rows : 1 );
let _auto_extend = ( typeof autoextend != 'undefined' ? 'true' : null );
let _label = ( typeof label != 'undefined' ? label.liqd_slugify() : null );
let _id = ( typeof id != 'undefined' ? id : null );
let _disabled = ( typeof disabled != 'undefined' ? ' disabled' : '' );
let _className = ( typeof className != 'undefined' ? className : '' );

<label class={'Textarea ' + ( _value.length > 0 ? '' : 'empty ' ) + _error + _success  + _disabled + ( _label ? ' label' : '' ) + _className } style={ _style }>
    <textarea name={_name} id={_id} data-resize={_auto_extend} required={_required} onfocus={"textarea.Focus(this.parentNode);"+_onFocus} onchange={_onChange} onblur={"textarea.Blur(this.parentNode)"+_onBlur} rows={_rows}>
        {( _value.length > 0 ? _value : '' )}
    </textarea>
    if( _label )
    {
        <span onclick="this.previousSibling.focus();">{label}</span>
    }
</label>
