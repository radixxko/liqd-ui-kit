<style>
    .Scroll
    {
        position: relative;
        overflow: visible;
        width: 100%;
        height: 100%;

        .ScrollContent
        {
            &::-webkit-scrollbar { width: 0 !important; }

            position: relative;
            width: 100%;
            height: 100%;
            overflow-y: scroll;
            overflow-x: hidden;
            overflow-y: -moz-scrollbars-none;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

        .ScrollHandle
        {
            pointer-events: none;
            opacity: 0;
            position: absolute;
            top: 4px;
            right: calc(-16rem - 3px);
            width: 6px;
            bottom: 4px;
            background: #f0f0f0;
            border-radius: 3px;
            overflow: hidden;
            background: #ffffff;
            transition: background 350ms, opacity 350ms, transform 350ms;

            &.enter
             {
                 pointer-events: auto;
                 opacity: 0.5;
             }

            &.hover,
            &.active
             {
                 transform: scale(1.66666666667,1);
             }

            &.active
             {
                 opacity: 1;
                 background: #f0f0f0;
             }

            .ScrollHandleBar
            {
                position: absolute;
                top: 0;
                left: 0;
                width: 6px;
                height: 0;
                border-radius: 3px;
                background: #aaa;
                cursor: pointer;

                transition: opacity 200ms, margin 200ms, width 200ms, border-radius 200ms;
            }
        }
    }
</style>
<script>
    ( typeof Scroll === 'undefined' ) && ( Scroll =
        {
            update: function( scrollContent )
            {
                scrollContent.scrollNeedsUpdate = false;

                var scrollHandle = scrollContent.nextSibling, scrollHandleBar = scrollHandle.firstChild;

                if( scrollContent.offsetHeight < scrollContent.scrollHeight )
                {
                    var scrollHandleBarHeight = Math.max( 16, Math.round( scrollHandle.offsetHeight * scrollContent.offsetHeight / scrollContent.scrollHeight ));
                    var scrollHandleBarTop = Math.round(( scrollHandle.offsetHeight - scrollHandleBarHeight ) * scrollContent.scrollTop / ( scrollContent.scrollHeight - scrollContent.offsetHeight ));

                    scrollHandleBar.setAttribute( 'style', 'height:'+scrollHandleBarHeight+'px;top:'+scrollHandleBarTop+'px' );
                    scrollHandle.classList.add( 'enter' );

                    if( scrollContent.scrollTimeout )
                    {
                        clearTimeout( scrollContent.scrollTimeout );
                    }

                    scrollContent.scrollTimeout = setTimeout( function()
                        {
                            scrollContent.scrollTimeout = undefined;

                            Scroll.leave( scrollContent );
                        },
                        1000 );
                }
                else
                {
                    scrollHandle.classList.remove( 'enter' );
                }
            },

            enter: function( scrollContent, event )
            {
                if( scrollContent.scrollTimeout )
                {
                    clearTimeout( scrollContent.scrollTimeout );
                }

                scrollContent.scrollTimeout = setTimeout( function()
                    {
                        scrollContent.scrollTimeout = setTimeout( function()
                            {
                                scrollContent.scrollTimeout = undefined;

                                Scroll.leave( scrollContent );
                            },
                            1000 );

                        Scroll.update( scrollContent );
                    },
                    350 );
            },

            leave: function( scrollContent, event )
            {
                //console.log( event.offsetX < 0.8 *  );

                scrollContent.scrollTimeout = setTimeout( function()
                    {
                        scrollContent.scrollTimeout = undefined;

                        var scrollHandle = scrollContent.nextSibling;

                        scrollHandle.classList.remove( 'enter' );
                    },
                    500 );
            },

            onScroll: function( scrollContent )
            {
                if( !scrollContent.scrollNeedsUpdate )
                {
                    scrollContent.scrollNeedsUpdate = true;
                    window.requestAnimationFrame( window.Scroll.update.bind( null, scrollContent ));
                }
            },

            hover: function( scrollHandleBar )
            {
                scrollHandleBar.parentNode.classList.add( 'hover' );
            },

            blur: function( scrollHandleBar )
            {
                scrollHandleBar.parentNode.classList.remove( 'hover' );
            },

            onDragStart: function( scrollHandleBar, event )
            {
                scrollHandleBar.scrollDrag =
                    {
                        top: scrollHandleBar.offsetTop,
                        y: event.clientY,
                        drag: Scroll.onDrag.bind( null, scrollHandleBar ),
                        dragStop: Scroll.onDragStop.bind( null, scrollHandleBar )
                    };

                scrollHandleBar.parentNode.classList.add( 'active' );

                document.body.addEventListener( 'mousemove', scrollHandleBar.scrollDrag.drag, true );
                document.body.addEventListener( 'mouseup', scrollHandleBar.scrollDrag.dragStop, true );

                event.preventDefault();
                event.stopPropagation();

                return false;
            },

            onDrag: function( scrollHandleBar, event )
            {
                var scrollHandle = scrollHandleBar.parentNode;
                var scrollContent = scrollHandle.previousSibling;
                var scrollHandleBarTop = scrollHandleBar.scrollDrag.top + event.clientY - scrollHandleBar.scrollDrag.y;

                scrollContent.scrollTop = Math.round(( scrollContent.scrollHeight - scrollContent.offsetHeight ) * Math.max( 0, Math.min( scrollHandleBarTop, scrollHandle.offsetHeight - scrollHandleBar.offsetHeight )) / ( scrollHandle.offsetHeight - scrollHandleBar.offsetHeight ));
            },

            onDragStop: function( scrollHandleBar, event )
            {
                scrollHandleBar.parentNode.classList.remove( 'active' );

                document.body.removeEventListener( 'mousemove', scrollHandleBar.scrollDrag.drag, true );
                document.body.removeEventListener( 'mouseup', scrollHandleBar.scrollDrag.dragStop, true );
            }
        });
</script>

let _selector = ( typeof selector != 'undefined' ? selector : null );

<div class="Scroll" data-selector={_selector}  onmouseenter="Scroll.enter(this.firstChild, event)" onmouseleave="Scroll.leave(this.firstChild, event)" style={( typeof width !== 'undefined' ? 'width:' + width + ';' : '' )+( typeof height !== 'undefined' ? 'height:' + height + ';' : '' )}>
    <div class="ScrollContent" onscroll="Scroll.onScroll(this)" style={( typeof overflowLeft !== 'undefined' ? 'margin-left:'+overflowLeft.replace(/^\s*calc\((.*)\)\s*$/,'calc(-1 * ($1))')+';padding-left:'+overflowLeft : '' )}>
        {CONTENT}
    </div>
    <div class="ScrollHandle">
        <div class="ScrollHandleBar" onmousedown="return Scroll.onDragStart(this, event)" onmouseenter="Scroll.hover(this)" onmouseleave="Scroll.blur(this)">
        </div>
    </div>
</div>
